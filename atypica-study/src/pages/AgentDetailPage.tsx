import { useParams, Link } from 'react-router-dom';
import { useState } from 'react';
import { mockAgents, mockStudies } from '../data/mockData';
import ChatInterface from '../components/ChatInterface';
import { Message } from '../types';
import { v4 as uuidv4 } from 'uuid';

export default function AgentDetailPage() {
  const { id } = useParams<{ id: string }>();
  const agent = mockAgents.find(a => a.id === id);
  
  const [messages, setMessages] = useState<Message[]>([
    {
      id: uuidv4(),
      role: 'system',
      content: `You are now chatting with ${agent?.name || 'an AI agent'}. This is a direct conversation outside of a specific study.`,
      timestamp: new Date().toISOString()
    }
  ]);
  
  if (!agent) {
    return (
      <div className="container mx-auto px-4 py-12 text-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">Agent not found</h2>
        <p className="text-gray-600 dark:text-gray-300 mb-6">The agent you're looking for doesn't exist or has been removed.</p>
        <Link to="/agents" className="btn btn-primary">Back to Agents</Link>
      </div>
    );
  }

  // Find studies that this agent is used in
  const relatedStudies = mockStudies.slice(0, 3); // Just showing 3 for demo purposes
  
  const handleSendMessage = (content: string) => {
    // Add user message
    const userMessage: Message = {
      id: uuidv4(),
      role: 'user',
      content,
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Simulate agent response after a short delay
    setTimeout(() => {
      const agentMessage: Message = {
        id: uuidv4(),
        role: 'agent',
        content: `This is a simulated response from ${agent.name}. In a real application, this would be generated by an AI model based on your message: "${content}"`,
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, agentMessage]);
    }, 1000);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6">
        <Link to="/agents" className="text-primary-600 hover:text-primary-800 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clipRule="evenodd" />
          </svg>
          Back to Agents
        </Link>
      </div>
      
      <div className="flex flex-col lg:flex-row gap-8">
        <div className="lg:w-1/3">
          <img 
            src={agent.imageUrl} 
            alt={agent.name} 
            className="w-full h-64 object-cover rounded-lg shadow-md"
          />
          
          <div className="mt-6 bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{agent.name}</h2>
              <span className={`px-2 py-1 text-xs rounded-full ${
                agent.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
              }`}>
                {agent.status.charAt(0).toUpperCase() + agent.status.slice(1)}
              </span>
            </div>
            
            <p className="mt-4 text-gray-600 dark:text-gray-300">{agent.description}</p>
            
            <div className="mt-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">Capabilities</h3>
              <ul className="space-y-2">
                {agent.capabilities.map((capability, index) => (
                  <li key={index} className="flex items-start">
                    <svg className="h-5 w-5 text-green-500 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="text-gray-600 dark:text-gray-300">{capability}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div className="mt-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">Related Studies</h3>
              {relatedStudies.length > 0 ? (
                <div className="space-y-3">
                  {relatedStudies.map(study => (
                    <Link 
                      key={study.id} 
                      to={`/study/${study.id}`}
                      className="block border rounded-md p-3 hover:bg-gray-50 dark:hover:bg-gray-700"
                    >
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">{study.title}</h4>
                      <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 line-clamp-1">{study.description}</p>
                    </Link>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 dark:text-gray-400">No related studies found</p>
              )}
            </div>
          </div>
        </div>
        
        <div className="lg:w-2/3">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden h-[600px]">
            <div className="border-b border-gray-200 dark:border-gray-700 px-4 py-3">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Chat with {agent.name}</h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                This is a direct conversation with the agent outside of a specific study.
              </p>
            </div>
            
            <ChatInterface 
              messages={messages} 
              onSendMessage={handleSendMessage} 
            />
          </div>
        </div>
      </div>
    </div>
  );
}